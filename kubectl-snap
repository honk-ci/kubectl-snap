#!/usr/bin/env bash
#
# A kubectl plugin to restore balance in your Kubernetes Cluster
# But also a chaos engineering test plugin
#

function help() {
    echo "Usage: "
    echo "  kubectl snap [options]"
    echo ""
    echo "Options:"
    echo "  -n <namespace> Namespace (optional)"
    echo "  -h             Show this message"
    echo "Example:"
    echo "...."
}

function snap() {
    echo "Snapping in" ${namespace:-"every namespace"}
    echo "Hold tight, little one..."
    if [ -z "$namespace" ]; then
        pods=`kubectl get pods --no-headers -o custom-columns=":metadata.name,:metadata.namespace" --all-namespaces`
    else
        pods=`kubectl -n ${namespace} get pods --no-headers -o custom-columns=":metadata.name,:metadata.namespace"`
    fi
    
    linecount=$(echo "$pods" | wc -l)

    half=$(($linecount/2))

    delete=$(echo "$pods" | shuf | head -n $half)

    while read -r line; do
        arrIN=(${line//,/ })
        echo " -- Deleting pod ${arrIN[0]} in ${arrIN[1]}"
        kubectl -n ${arrIN[1]} delete pod ${arrIN[0]}
    done <<< "$delete"
    
    echo "Balance has been restored."
}

force=False

while getopts "n: a f h" opt; do
  case "$opt" in
    n)  
        namespace="$OPTARG"
        echo "Namespace set to $namespace"
        ;;
    a)
        namespace=""
        ;;
    f)
        force=True
        ;;
    h)
        help
        exit 0
        ;;
    ?) 
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
  esac
done

echo "When I'm done, half of this cluster will still exist."
echo "Perfectly balanced, as all things should be... I hope they remember you."

if [ "True" != "$force" ]; then
    read -p "Are you sure? " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        snap
    fi
else
    snap
fi